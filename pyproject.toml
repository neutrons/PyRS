[project]
name = "pyrs"
description = "Data reduction and visualization of neutron data measured at the HFIR HB2B instrument"
dynamic = ["version"]
requires-python = ">=3.10"
license = { text = "MIT" }
keywords = ["neutrons", "python"]
readme = "README.rst"

####################
### Build config ###
####################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "versioningit", "wheel"]

[tool.hatch.version]
source = "versioningit"

[tool.hatch.build.hooks.versioningit-onbuild]
source-file = "pyrs/_version.py"
build-file = "pyrs/_version.py"
replacement = '"{next_version}"'

[tool.hatch.build]
artifacts = [
  "pyrs/_version.py",
  "pyrs/**/*.yml",
  "pyrs/**/*.yaml",
  "pyrs/**/*.ini",
]

[tool.hatch.build.targets.wheel]
packages = ["pyrs"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.1.0"


[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}+d{build_date:%Y%m%d}"
distance-dirty = "{next_version}.dev{distance}+d{build_date:%Y%m%d%H%M}"

[tool.versioningit.write]
file = "pyrs/_version.py"

[tool.pixi.workspace]
preview = [ "pixi-build",]
channels = [ "conda-forge", "mantid", "https://prefix.dev/pixi-build-backends",]
platforms = [ "linux-64",]

[tool.pixi.dependencies]
python = "*"
pip = "*"
mantidworkbench = ">=6.12"
qtpy = "*"
pyqt = "*"
uncertainties = "*"
libarchive = "*"
matplotlib = "*"
numpy = "*"
pandas = "*"
types-six = "*"

[tool.pixi.package.host-dependencies]
hatchling = "*"
versioningit = "*"


# ------------------------------- #
# Pixi Feature Dependencies       #
# ------------------------------- #
[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-qt = "*"
pytest-cov = "*"
flake8 = "*"
mypy = "*"

[tool.pixi.feature.package.dependencies]
boa = "*"
anaconda-client = "*"
conda-build = "<24"
conda-verify = "*"
check-wheel-contents = ">=0.6.0"
twine = "*"
versioningit = "*"
hatch = "*"
toml = "*"

[tool.pixi.feature.developer.dependencies]
pre-commit = "*"
flake8 = "*"
mypy = "*"
python-build = "*"

[tool.pixi.feature.docs.dependencies]
sphinx = "*"
sphinx_rtd_theme = "*"
sphinxcontrib-mermaid = "*"
types-pyyaml = "*"
versioningit = "*"

[tool.pixi.package]
name = "pyrs"
version = "0.0.0"  # placeholder, overwritten by sync-version

[tool.pixi.package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }
channels = [
  "conda-forge",
  "mantid",
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]

[tool.pixi.environments]
default = { features = [
  "docs",
  "developer",
  "package",
  "test",
], solve-group = "default" }

# --------------- #
# Pixi Tasks      #
# --------------- #
[tool.pixi.tasks]
# PyPi packaging tasks
build-pypi = { cmd = "hatch build", description = "Build the package for PyPI" }
publish-pypi = { cmd = "twine upload dist/*", description = "Publish the package to PyPI", depends-on = ["build-pypi"] }
publish-pypi-test = { cmd = "twine upload --repository testpypi dist/*", description = "Publish the package to TestPyPI", depends-on = ["build-pypi"] }
clean-pypi = { cmd = "rm -rf dist", description = "Clean the PyPI build artifacts" }

build-wheel = { cmd = "python setup.py bdist_wheel; check-wheel-contents dist/pyrs-*.whl", description = "Build the Python wheel package" }

# Conda packaging tasks
build-conda-command = { cmd = "pixi build", description = "Build the conda package command" }
build-conda = { description = "Build the conda package", depends-on = ["sync-version", "build-conda-command", "reset-version"] }
publish-conda = { cmd = "anaconda upload *.conda", description = "Publish the .conda package to anaconda.org", depends-on = ["build-conda"] }
clean-conda = { cmd = "rm -f *.conda", description = "Clean the local .conda build artifacts" }

# Documentation tasks
build-docs = { cmd = "sphinx-build -b html docs/source docs/_build", description = "Build the documentation" }
clean-docs = { cmd = "rm -rf docs/_build", description = "Clean the documentation build artifacts" }
docs-serve = { cmd = "python -m http.server 8000 -d docs/_build", description = "Serve documentation locally on port 8000" }
docs-autobuild = { cmd = "sphinx-autobuild docs/source docs/_build --host 0.0.0.0 --port 8000", description = "Auto-rebuild and serve docs on changes" }

# Testing tasks
test = { cmd = "pytest --cov=pyrs --cov-report=xml --cov-report=term ./tests", description = "Run the tests with coverage" }
test-import-framework = { cmd = "python -c 'import pyrs'; python -c 'import qtpy'; python -c 'import mantidqt'", description = "Test import of main dependencies" }

lint-flake8 = { cmd = "flake8 pyrs scripts tests --count --max-line-length=119 --exclude pyrs/icons", description = "Run flake8 linter on the codebase" }

# MISC
clean-all = { description = "Clean all build artifacts", depends-on = ["clean-pypi", "clean-docs", "clean-conda"] }
sync-version = { cmd = "version=$(python -m versioningit); python -c \"import toml; data=toml.load('pyproject.toml'); data['tool']['pixi']['package']['version']='$version'; open('pyproject.toml', 'w').write(toml.dumps(data))\"", description = "Sync pyproject.toml version with Git version" }
reset-version = { cmd = "python -c \"import toml; data=toml.load('pyproject.toml'); data['tool']['pixi']['package']['version']='0.0.0'; open('pyproject.toml', 'w').write(toml.dumps(data))\"", description = "Reset the package version to 0.0.0" }

# Application tasks
pyrs-build = { cmd = "python setup.py build", description = "Build the pyrs application" }
pyrs = { cmd = "python scripts/pyrsplot", description = "Start the pyrs application", depends-on = ["pyrs-build"] }

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true